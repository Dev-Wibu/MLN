import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowRight, Brain, CheckCircle, Factory, Play, RotateCcw, Smartphone, XCircle } from "lucide-react";
import { useState } from "react";

interface QuizQuestion {
  id: number;
  question: string;
  options: {
    id: string;
    text: string;
    analysis: string;
    isCorrect: boolean;
  }[];
  explanation: string;
}

const ExploitationPage = () => {
  const [currentQuiz, setCurrentQuiz] = useState<number | null>(null);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [completedQuizzes, setCompletedQuizzes] = useState<Set<number>>(new Set());

  const quizQuestions: QuizQuestion[] = [
    {
      id: 1,
      question: "B·∫°n l√† m·ªôt YouTuber c√≥ 100k subscribers. YouTube gi·ªØ 45% doanh thu qu·∫£ng c√°o c·ªßa b·∫°n. ƒêi·ªÅu n√†y c√≥ nghƒ©a l√†:",
      options: [
        {
          id: "a",
          text: "YouTube cung c·∫•p d·ªãch v·ª• n√™n x·ª©ng ƒë√°ng ƒë∆∞·ª£c tr·∫£ ph√≠",
          analysis: "T∆∞ duy t∆∞ b·∫£n: Ch·∫•p nh·∫≠n s·ª± b√≥c l·ªôt nh∆∞ l√† 'd·ªãch v·ª•'",
          isCorrect: false,
        },
        {
          id: "b",
          text: "T√¥i v·∫´n t·ª± do s√°ng t·∫°o n√™n kh√¥ng sao",
          analysis: "·∫¢o t∆∞·ªüng v·ªÅ t·ª± do: B·ªè qua vi·ªác b·ªã ki·ªÉm so√°t b·ªüi thu·∫≠t to√°n",
          isCorrect: false,
        },
        {
          id: "c",
          text: "YouTube ƒëang chi·∫øm ƒëo·∫°t g·∫ßn m·ªôt n·ª≠a gi√° tr·ªã t√¥i t·∫°o ra",
          analysis: "ƒê√∫ng! ƒê√¢y l√† h√¨nh th·ª©c b√≥c l·ªôt gi√° tr·ªã th·∫∑ng d∆∞ hi·ªán ƒë·∫°i",
          isCorrect: true,
        },
      ],
      explanation:
        "YouTube s·ªü h·ªØu 't∆∞ li·ªáu s·∫£n xu·∫•t' (platform, thu·∫≠t to√°n, h·∫° t·∫ßng) v√† chi·∫øm ƒëo·∫°t 45% gi√° tr·ªã do creator t·∫°o ra. ƒê√¢y ch√≠nh l√† b√≥c l·ªôt theo nghƒ©a M√°c-x√≠t.",
    },
    {
      id: 2,
      question: "Uber/Grab tuy√™n b·ªë t√†i x·∫ø l√† 'ƒë·ªëi t√°c', kh√¥ng ph·∫£i nh√¢n vi√™n. B·∫£n ch·∫•t th·ª±c s·ª± l√†:",
      options: [
        {
          id: "a",
          text: "T√†i x·∫ø c√≥ t·ª± do l√†m vi·ªác khi mu·ªën",
          analysis: "T·ª± do h√¨nh th·ª©c: V·∫´n ph·∫£i tu√¢n theo quy t·∫Øc v√† thu·∫≠t to√°n c·ªßa platform",
          isCorrect: false,
        },
        {
          id: "b",
          text: "ƒê√¢y l√† m√¥ h√¨nh h·ª£p t√°c b√¨nh ƒë·∫≥ng",
          analysis: "·∫¢o t∆∞·ªüng: Platform ki·ªÉm so√°t gi√° c·∫£, quy t·∫Øc, v√† c√≥ th·ªÉ ban t√†i x·∫ø",
          isCorrect: false,
        },
        {
          id: "c",
          text: "C√°ch n√© tr√°nh tr√°ch nhi·ªám b·∫£o hi·ªÉm, ph√∫c l·ª£i cho ng∆∞·ªùi lao ƒë·ªông",
          analysis: "Ch√≠nh x√°c! ƒê√¢y l√† c√°ch platform t·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n b·∫±ng c√°ch chuy·ªÉn r·ªßi ro cho 'ƒë·ªëi t√°c'",
          isCorrect: true,
        },
      ],
      explanation:
        "B·∫±ng c√°ch g·ªçi t√†i x·∫ø l√† 'ƒë·ªëi t√°c', platform tr√°nh ƒë∆∞·ª£c nghƒ©a v·ª• b·∫£o hi·ªÉm, ph√∫c l·ª£i, nh∆∞ng v·∫´n ki·ªÉm so√°t ho√†n to√†n quy tr√¨nh l√†m vi·ªác.",
    },
    {
      id: 3,
      question: "Facebook/Meta ki·∫øm ti·ªÅn t·ª´ d·ªØ li·ªáu c√° nh√¢n c·ªßa 3.8 t·ª∑ ng∆∞·ªùi d√πng. ƒêi·ªÅu n√†y th·ªÉ hi·ªán:",
      options: [
        {
          id: "a",
          text: "Ng∆∞·ªùi d√πng ƒë∆∞·ª£c d√πng free n√™n c√¥ng b·∫±ng",
          analysis: "T∆∞ duy sai l·ªách: D·ªØ li·ªáu c√° nh√¢n c√≥ gi√° tr·ªã kinh t·∫ø kh·ªïng l·ªì",
          isCorrect: false,
        },
        {
          id: "b",
          text: "Meta cung c·∫•p gi√° tr·ªã n√™n x·ª©ng ƒë√°ng ƒë∆∞·ª£c tr·∫£",
          analysis: "B·ªè qua b·∫•t c√¥ng: Ng∆∞·ªùi d√πng t·∫°o ra n·ªôi dung v√† d·ªØ li·ªáu nh∆∞ng kh√¥ng ƒë∆∞·ª£c chia s·∫ª l·ª£i nhu·∫≠n",
          isCorrect: false,
        },
        {
          id: "c",
          text: "H√¨nh th·ª©c b√≥c l·ªôt m·ªõi: bi·∫øn con ng∆∞·ªùi th√†nh 's·∫£n ph·∫©m'",
          analysis: "ƒê√∫ng! ƒê√¢y l√† 'surveillance capitalism' - bi·∫øn d·ªØ li·ªáu c√° nh√¢n th√†nh h√†ng h√≥a",
          isCorrect: true,
        },
      ],
      explanation: "'N·∫øu b·∫°n kh√¥ng tr·∫£ ti·ªÅn cho s·∫£n ph·∫©m, th√¨ ch√≠nh b·∫°n l√† s·∫£n ph·∫©m.' Meta b√≥c l·ªôt d·ªØ li·ªáu c√° nh√¢n ƒë·ªÉ b√°n cho advertiser.",
    },
  ];

  const exploitationComparison = [
    {
      period: "Th·ªùi phong ki·∫øn",
      exploiter: "ƒê·ªãa ch·ªß",
      exploited: "N√¥ng d√¢n",
      method: "Chi·∫øm ƒëo·∫°t t√¥ thu·∫ø",
      control: "S·ªü h·ªØu ƒë·∫•t ƒëai",
      resistance: "Kh·ªüi nghƒ©a n√¥ng d√¢n",
    },
    {
      period: "Th·ªùi t∆∞ b·∫£n",
      exploiter: "Ch·ªß nh√† m√°y",
      exploited: "C√¥ng nh√¢n",
      method: "Chi·∫øm ƒëo·∫°t gi√° tr·ªã th·∫∑ng d∆∞",
      control: "S·ªü h·ªØu t∆∞ li·ªáu s·∫£n xu·∫•t",
      resistance: "ƒê√¨nh c√¥ng, c√¥ng ƒëo√†n",
    },
    {
      period: "K·ª∑ nguy√™n s·ªë",
      exploiter: "Big Tech",
      exploited: "Creator/User",
      method: "Chi·∫øm ƒëo·∫°t d·ªØ li·ªáu, n·ªôi dung",
      control: "S·ªü h·ªØu platform, thu·∫≠t to√°n",
      resistance: "Ch∆∞a c√≥ h√¨nh th·ª©c t·∫≠p th·ªÉ",
    },
  ];

  const handleAnswerSelect = (answerId: string) => {
    setSelectedAnswer(answerId);
    setShowResult(true);
  };

  const handleNextQuestion = () => {
    if (currentQuiz !== null) {
      setCompletedQuizzes((prev) => new Set([...prev, currentQuiz]));
    }
    setCurrentQuiz(null);
    setSelectedAnswer(null);
    setShowResult(false);
  };

  const resetQuiz = () => {
    setCurrentQuiz(null);
    setSelectedAnswer(null);
    setShowResult(false);
  };

  const getCurrentQuestion = () => {
    return currentQuiz !== null ? quizQuestions.find((q) => q.id === currentQuiz) : null;
  };

  const currentQuestion = getCurrentQuestion();

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-100 to-yellow-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-6xl font-bold text-amber-900 mb-6">H√¨nh th·ª©c b√≥c l·ªôt m·ªõi</h1>
          <p className="text-xl text-amber-700 max-w-4xl mx-auto">
            T·ª´ "Ch·ªß nh√† m√°y" b√≥c l·ªôt c√¥ng nh√¢n ƒë·∫øn "N·ªÅn t·∫£ng" b√≥c l·ªôt creator. H√¨nh th·ª©c thay ƒë·ªïi, b·∫£n ch·∫•t v·∫´n v·∫≠y.
          </p>
        </div>

        {/* Evolution of Exploitation */}
        <Card className="mb-12 border-amber-200">
          <CardHeader className="bg-gradient-to-r from-amber-100 to-yellow-100">
            <CardTitle className="text-2xl text-amber-900 text-center">S·ª± ti·∫øn h√≥a c·ªßa h√¨nh th·ª©c b√≥c l·ªôt</CardTitle>
          </CardHeader>
          <CardContent className="p-8">
            <div className="space-y-8">
              {exploitationComparison.map((era, index) => (
                <div key={index} className="relative">
                  <div className="grid md:grid-cols-6 gap-4 items-center">
                    <div className="text-center">
                      <Badge variant="outline" className="text-amber-700 border-amber-300">
                        {era.period}
                      </Badge>
                    </div>

                    <div className="text-center">
                      <div className="bg-red-100 p-3 rounded-lg">
                        <div className="font-semibold text-red-800">{era.exploiter}</div>
                      </div>
                    </div>

                    <div className="text-center">
                      <ArrowRight className="w-6 h-6 text-amber-600 mx-auto" />
                    </div>

                    <div className="text-center">
                      <div className="bg-blue-100 p-3 rounded-lg">
                        <div className="font-semibold text-blue-800">{era.exploited}</div>
                      </div>
                    </div>

                    <div className="text-center text-sm text-amber-700">
                      <div className="font-semibold mb-1">Ph∆∞∆°ng th·ª©c:</div>
                      <div>{era.method}</div>
                    </div>

                    <div className="text-center text-sm text-amber-700">
                      <div className="font-semibold mb-1">Ki·ªÉm so√°t:</div>
                      <div>{era.control}</div>
                    </div>
                  </div>

                  {index < exploitationComparison.length - 1 && (
                    <div className="flex justify-center mt-4">
                      <div className="w-1 h-8 bg-amber-300 rounded"></div>
                    </div>
                  )}
                </div>
              ))}
            </div>

            <div className="mt-8 p-6 bg-amber-50 rounded-lg border border-amber-200">
              <h3 className="font-bold text-amber-900 mb-3">üîç Nh·∫≠n x√©t:</h3>
              <p className="text-amber-800">
                H√¨nh th·ª©c b√≥c l·ªôt ng√†y c√†ng tinh vi v√† ·∫©n gi·∫•u. T·ª´ b√≥c l·ªôt v·∫≠t l√Ω tr·ª±c ti·∫øp (n√¥ l·ªá), ƒë·∫øn b√≥c l·ªôt kinh t·∫ø (t∆∞ b·∫£n), v√† gi·ªù l√† b√≥c l·ªôt
                d·ªØ li·ªáu/n·ªôi dung (platform). ƒêi·ªÉm chung: lu√¥n c√≥ m·ªôt nh√≥m ki·ªÉm so√°t "t∆∞ li·ªáu s·∫£n xu·∫•t" v√† chi·∫øm ƒëo·∫°t gi√° tr·ªã do nh√≥m kh√°c t·∫°o ra.
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Interactive Quiz Section */}
        <Card className="mb-12 border-amber-200">
          <CardHeader className="bg-gradient-to-r from-purple-100 to-pink-100">
            <CardTitle className="text-2xl text-amber-900 text-center flex items-center justify-center gap-2">
              <Brain className="w-6 h-6" />
              Quiz t∆∞∆°ng t√°c: "B·∫°n c√≥ th·ª±c s·ª± l√†m ch·ªß?"
            </CardTitle>
          </CardHeader>
          <CardContent className="p-8">
            {currentQuiz === null ? (
              // Quiz Selection
              <div className="space-y-6">
                <p className="text-amber-800 text-center mb-8">Ch·ªçn m·ªôt t√¨nh hu·ªëng ƒë·ªÉ ph√¢n t√≠ch theo quan ƒëi·ªÉm tri·∫øt h·ªçc M√°c-x√≠t:</p>

                <div className="grid md:flex-cols-3 gap-4">
                  {quizQuestions.map((quiz) => (
                    <Button
                      key={quiz.id}
                      onClick={() => setCurrentQuiz(quiz.id)}
                      variant="outline"
                      className={`h-auto p-6 text-left border-2 transition-all duration-300 w-full ${
                        completedQuizzes.has(quiz.id) ? "border-green-400 bg-green-50" : "border-amber-300 hover:border-amber-400 hover:bg-amber-50"
                      }`}
                    >
                      <div className="flex items-start gap-3">
                        {completedQuizzes.has(quiz.id) ? (
                          <CheckCircle className="w-6 h-6 text-green-600 mt-1 flex-shrink-0" />
                        ) : (
                          <Play className="w-6 h-6 text-amber-600 mt-1 flex-shrink-0" />
                        )}
                        <div className="overflow-hidden">
                          <div className="font-semibold text-amber-900 mb-2">T√¨nh hu·ªëng {quiz.id}</div>
                          <div className="text-sm text-amber-700 break-words">{quiz.question.substring(0, 100)}...</div>
                        </div>
                      </div>
                    </Button>
                  ))}
                </div>

                {completedQuizzes.size > 0 && (
                  <div className="text-center mt-8">
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      ƒê√£ ho√†n th√†nh: {completedQuizzes.size}/{quizQuestions.length} t√¨nh hu·ªëng
                    </Badge>
                  </div>
                )}
              </div>
            ) : (
              // Quiz Question
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <Badge variant="outline" className="text-amber-700 border-amber-300">
                    T√¨nh hu·ªëng {currentQuiz}
                  </Badge>
                  <Button onClick={resetQuiz} variant="ghost" size="sm" className="text-amber-600 hover:text-amber-700">
                    <RotateCcw className="w-4 h-4 mr-1" />
                    Quay l·∫°i
                  </Button>
                </div>

                <Card className="border-2 border-amber-300">
                  <CardContent className="p-6">
                    <h3 className="text-lg font-semibold text-amber-900 mb-6 break-words">{currentQuestion?.question}</h3>

                    <div className="space-y-3">
                      {currentQuestion?.options.map((option) => (
                        <Button
                          key={option.id}
                          onClick={() => handleAnswerSelect(option.id)}
                          disabled={showResult}
                          variant="outline"
                          className={`w-full text-left justify-start p-4 h-auto transition-all duration-300 ${
                            selectedAnswer === option.id
                              ? option.isCorrect
                                ? "border-green-500 bg-green-50"
                                : "border-red-500 bg-red-50"
                              : "border-amber-300 hover:border-amber-400 hover:bg-amber-50"
                          }`}
                        >
                          <div className="flex items-center gap-3 w-full flex-wrap">
                            <div className="w-8 h-8 rounded-full border-2 border-current flex items-center justify-center flex-shrink-0">
                              {option.id.toUpperCase()}
                            </div>
                            <div className="flex-1 text-sm break-words">{option.text}</div>
                            {showResult && selectedAnswer === option.id && (
                              <div className="flex-shrink-0">
                                {option.isCorrect ? <CheckCircle className="w-5 h-5 text-green-600" /> : <XCircle className="w-5 h-5 text-red-600" />}
                              </div>
                            )}
                          </div>
                        </Button>
                      ))}
                    </div>

                    {showResult && selectedAnswer && (
                      <div className="mt-6 space-y-4">
                        <div className="p-4 bg-amber-50 rounded-lg border border-amber-200 overflow-hidden">
                          <h4 className="font-semibold text-amber-900 mb-2">Ph√¢n t√≠ch l·ª±a ch·ªçn c·ªßa b·∫°n:</h4>
                          <p className="text-amber-800 text-sm break-words">
                            {currentQuestion?.options.find((o) => o.id === selectedAnswer)?.analysis}
                          </p>
                        </div>

                        <div className="p-4 bg-blue-50 rounded-lg border border-blue-200 overflow-hidden">
                          <h4 className="font-semibold text-blue-900 mb-2">üí° Gi·∫£i th√≠ch:</h4>
                          <p className="text-blue-800 text-sm break-words">{currentQuestion?.explanation}</p>
                        </div>

                        <div className="text-center">
                          <Button onClick={handleNextQuestion} className="bg-amber-600 hover:bg-amber-700 text-white">
                            Ti·∫øp t·ª•c kh√°m ph√°
                            <ArrowRight className="w-4 h-4 ml-2" />
                          </Button>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Modern Exploitation Visualization */}
        <Card className="border-amber-200">
          <CardHeader className="bg-gradient-to-r from-red-100 to-orange-100">
            <CardTitle className="text-2xl text-amber-900 text-center">B√≥c l·ªôt hi·ªán ƒë·∫°i: T·ª´ Nh√† m√°y ƒë·∫øn Platform</CardTitle>
          </CardHeader>
          <CardContent className="p-8">
            <div className="grid md:grid-cols-2 gap-8">
              {/* Traditional Exploitation */}
              <div className="space-y-6">
                <h3 className="text-xl font-bold text-amber-900 text-center mb-6 flex items-center justify-center gap-2">
                  <Factory className="w-6 h-6" />
                  C≈®: Nh√† m√°y
                </h3>

                <div className="space-y-4">
                  <div className="bg-red-100 p-4 rounded-lg text-center">
                    <div className="font-semibold text-red-800 mb-2">Ch·ªß nh√† m√°y</div>
                    <div className="text-sm text-red-700">S·ªü h·ªØu m√°y m√≥c, nh√† x∆∞·ªüng</div>
                  </div>

                  <div className="flex justify-center">
                    <div className="bg-yellow-200 px-4 py-2 rounded-full text-sm font-semibold text-yellow-800">Tr·∫£ l∆∞∆°ng &lt; Gi√° tr·ªã t·∫°o ra</div>
                  </div>

                  <div className="bg-blue-100 p-4 rounded-lg text-center">
                    <div className="font-semibold text-blue-800 mb-2">C√¥ng nh√¢n</div>
                    <div className="text-sm text-blue-700">B√°n s·ª©c lao ƒë·ªông, nh·∫≠n l∆∞∆°ng</div>
                  </div>
                </div>

                <div className="text-center">
                  <Badge variant="outline" className="text-red-700 border-red-300">
                    B√≥c l·ªôt R√ï R√ÄNG ‚Ä¢ D·ªÖ nh·∫≠n th·∫•y
                  </Badge>
                </div>
              </div>

              {/* Modern Exploitation */}
              <div className="space-y-6">
                <h3 className="text-xl font-bold text-amber-900 text-center mb-6 flex items-center justify-center gap-2">
                  <Smartphone className="w-6 h-6" />
                  NAY: Platform
                </h3>

                <div className="space-y-4">
                  <div className="bg-purple-100 p-4 rounded-lg text-center">
                    <div className="font-semibold text-purple-800 mb-2">Big Tech</div>
                    <div className="text-sm text-purple-700">S·ªü h·ªØu platform, thu·∫≠t to√°n, d·ªØ li·ªáu</div>
                  </div>

                  <div className="flex justify-center">
                    <div className="bg-yellow-200 px-4 py-2 rounded-full text-sm font-semibold text-yellow-800">
                      "D·ªãch v·ª• mi·ªÖn ph√≠" = B√≥c l·ªôt d·ªØ li·ªáu
                    </div>
                  </div>

                  <div className="bg-green-100 p-4 rounded-lg text-center">
                    <div className="font-semibold text-green-800 mb-2">"T·ª± do" Creator</div>
                    <div className="text-sm text-green-700">T·∫°o n·ªôi dung, platform chi·∫øm 20-50%</div>
                  </div>
                </div>

                <div className="text-center">
                  <Badge variant="outline" className="text-green-700 border-green-300">
                    B√≥c l·ªôt ·∫®N GI·∫§U ‚Ä¢ Kh√≥ nh·∫≠n ra
                  </Badge>
                </div>
              </div>
            </div>

            <div className="mt-8 p-6 bg-gradient-to-r from-amber-100 to-yellow-100 rounded-lg border border-amber-300">
              <h3 className="font-bold text-amber-900 mb-3 text-center">‚ö° K·∫øt lu·∫≠n:</h3>
              <p className="text-amber-800 text-center">
                H√¨nh th·ª©c thay ƒë·ªïi, nh∆∞ng b·∫£n ch·∫•t v·∫´n v·∫≠y: m·ªôt nh√≥m nh·ªè s·ªü h·ªØu "t∆∞ li·ªáu s·∫£n xu·∫•t" (ng√†y x∆∞a l√† nh√† m√°y, b√¢y gi·ªù l√† platform) v√† chi·∫øm
                ƒëo·∫°t gi√° tr·ªã do ƒëa s·ªë t·∫°o ra. S·ª± kh√°c bi·ªát l√† gi·ªù ƒë√¢y h·ªç khi·∫øn ch√∫ng ta t∆∞·ªüng r·∫±ng m√¨nh "t·ª± do".
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ExploitationPage;
